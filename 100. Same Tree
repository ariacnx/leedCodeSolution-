/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        Queue<TreeNode> queue = new LinkedList<>();
        
        queue.add(p);
        queue.add(q);
        
        while(queue.size() != 0){
            TreeNode currA = queue.poll();
            TreeNode currB = queue.poll();
            if(currA == null && currB == null){
                continue;
            }
            else if(currA ==null || currB == null || currA.val != currB.val){
                return false;
            }
            queue.add(currA.left);
            queue.add(currB.left);
            queue.add(currA.right);
            queue.add(currB.right);
            
        }
        return true;
        
    }
}


class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null){
            return true;
        }
        if(p == null || q == null){
            return false;
        }
        
        if(p.val != q.val){
            return false;
        }
        
        return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
    }
}
